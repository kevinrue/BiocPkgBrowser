---
title: "Experimentation"
format: html
---

```{r}
library(BiocPkgTools)
library(biocViews)
data(biocViewsVocab)
```

## Getting data

```{r}
pkg_list <- BiocPkgTools::biocPkgList()
pkg_list
```

## biocViews for one package

The `biocViews` column contains the vector of biocViews for each package.

Example below for the first package in the table:

```{r}
pkg_list$biocViews[[1]]
```

## Getting sub-terms for a biocViews

While it might be nice to ask the reverse question
"If a package is annotated to XXX, which parent terms is it part of?",
this allows users to search for all packages under a certain parent term.

Note that only one term can be queried at a time.

The function doesn't crash if more than one is given, but only the first term is processed correctly,
while all other query terms are simply concacenated to the output without searching for their sub-terms.

```{r}
biocViews::getSubTerms(dag = biocViewsVocab, term = "Sequencing")
```

## Getting packages associated with a term

(or one of its child terms)

```{r}
# input
query_term <- "Sequencing"
# code
x_terms <- biocViews::getSubTerms(dag = biocViewsVocab, term = query_term)
which_pkgs <- vapply(
  X = pkg_list$biocViews,
  FUN = function(pkg_terms, query_terms) {
    any(pkg_terms %in% query_terms)
  },
  FUN.VALUE = logical(1),
  query_terms = x_terms
)
res_pkg_names <- pkg_list$Package[which_pkgs]
str(res_pkg_names)
```

